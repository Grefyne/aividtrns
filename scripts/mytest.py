#!/usr/bin/env python3
"""
AUTO-GENERATED Installable Dependencies Test Script
Generated by scanning Python files for third-party package imports
Tests ONLY packages that need to be installed (pip/conda/etc.)
Excludes: Standard library modules, local project modules
"""

import sys
import traceback
import subprocess
import pkg_resources

def check_if_installed_via_pip(package_name):
    """Check if package is installed via pip"""
    try:
        pkg_resources.get_distribution(package_name)
        return True
    except pkg_resources.DistributionNotFound:
        return False

def suggest_install_command(module_name):
    """Suggest installation command for failed imports"""
    # Common module name to package name mappings
    package_mappings = {
        'cv2': 'opencv-python',
        'PIL': 'Pillow',
        'sklearn': 'scikit-learn',
        'yaml': 'PyYAML',
        'dateutil': 'python-dateutil',
        'serial': 'pyserial',
        'psutil': 'psutil',
        'requests': 'requests',
        'numpy': 'numpy',
        'pandas': 'pandas',
        'matplotlib': 'matplotlib',
        'torch': 'torch',
        'tensorflow': 'tensorflow',
        'transformers': 'transformers',
        'whisper': 'openai-whisper',
        'TTS': 'TTS',
        'pydub': 'pydub',
        'librosa': 'librosa',
    }
    
    package_name = package_mappings.get(module_name, module_name)
    return f"pip install {package_name}"

def test_import(module_name, import_statement=None, test_function=None):
    """Test importing a module and optionally run a test function"""
    try:
        if import_statement:
            exec(import_statement)
        else:
            __import__(module_name)
        
        # Check if installed via pip for additional info
        pip_installed = check_if_installed_via_pip(module_name)
        pip_info = " (pip)" if pip_installed else " (system/conda?)"
        
        result = f"✅ INSTALLED{pip_info}"
        if test_function:
            try:
                test_function()
                result += " + FUNCTIONAL"
            except Exception as e:
                result += f" - FUNCTION ERROR: {str(e)}"
        
        print(f"{module_name:<25}: {result}")
        return True
        
    except Exception as e:
        install_cmd = suggest_install_command(module_name)
        print(f"{module_name:<25}: ❌ MISSING - {str(e)}")
        print(f"{'':25}   💡 Try: {install_cmd}")
        return False

# Test functions for specific modules (only for installable packages)
def test_torch():
    """Test PyTorch with CUDA"""
    import torch
    print(f"{'':25}   → Version: {torch.__version__}")
    if torch.cuda.is_available():
        print(f"{'':25}   → CUDA: {torch.version.cuda}")
        print(f"{'':25}   → GPU: {torch.cuda.get_device_name()}")
        # Test basic CUDA operation
        x = torch.randn(2, 2).cuda()
        y = x + x
    else:
        print(f"{'':25}   → CUDA: Not available")

def test_numpy():
    """Test NumPy"""
    import numpy as np
    print(f"{'':25}   → Version: {np.__version__}")
    # Test basic operation
    arr = np.array([1, 2, 3])
    print(f"{'':25}   → Basic test: {arr.sum()}")

def test_pandas():
    """Test Pandas"""
    import pandas as pd
    print(f"{'':25}   → Version: {pd.__version__}")
    # Test basic operation
    df = pd.DataFrame({'a': [1, 2, 3]})
    print(f"{'':25}   → Basic test: {len(df)} rows")

def test_requests():
    """Test Requests"""
    import requests
    print(f"{'':25}   → Version: {requests.__version__}")

def test_whisper():
    """Test Whisper"""
    import whisper
    models = whisper.available_models()
    print(f"{'':25}   → Available models: {len(models)}")

def test_transformers():
    """Test Transformers"""
    import transformers
    print(f"{'':25}   → Version: {transformers.__version__}")

def test_tokenizers():
    """Test Tokenizers"""
    import tokenizers
    print(f"{'':25}   → Version: {tokenizers.__version__}")
    # Try to get CUDA info if available
    try:
        import torch
        if torch.cuda.is_available():
            print(f"{'':25}   → CUDA: {torch.version.cuda}")
            print(f"{'':25}   → GPU: {torch.cuda.get_device_name()}")
    except:
        pass

def test_regex():
    """Test regex"""
    import regex
    print(f"{'':25}   → Version: {regex.__version__}")

def test_num2words():
    """Test num2words"""
    import num2words
    print(f"{'':25}   → Version: {num2words.__version__}")
    # Test basic functionality
    result = num2words.num2words(6)
    print(f"{'':25}   → Basic test: {result}")

# Enhanced test functions mapping
test_functions = {
    'torch': test_torch,
    'numpy': test_numpy,
    'pandas': test_pandas,
    'requests': test_requests,
    'whisper': test_whisper,
    'transformers': test_transformers,
    'tokenizers': test_tokenizers,
    'regex': test_regex,
    'num2words': test_num2words,
}

print("="*80)
print("INSTALLABLE DEPENDENCIES TEST")
print("="*80)
print("Testing only third-party packages (excludes stdlib & local modules)")
print()

print("THIRD-PARTY PACKAGES FOUND IN YOUR CODE:")
print("-" * 50)
test_import("DeepCache", import_statement=None, test_function=test_functions.get("DeepCache"))
test_import("PIL", import_statement="from PIL import Image", test_function=test_functions.get("PIL"))
test_import("TTS", import_statement="from TTS.api import TTS", test_function=test_functions.get("TTS"))
test_import("accelerate", import_statement=None, test_function=test_functions.get("accelerate"))
test_import("affine_transform", import_statement=None, test_function=test_functions.get("affine_transform"))
test_import("attention", import_statement=None, test_function=test_functions.get("attention"))
test_import("audio", import_statement=None, test_function=test_functions.get("audio"))
test_import("basic", import_statement=None, test_function=test_functions.get("basic"))
test_import("box_utils", import_statement=None, test_function=test_functions.get("box_utils"))
test_import("cog", import_statement=None, test_function=test_functions.get("cog"))
test_import("cutlet", import_statement=None, test_function=test_functions.get("cutlet"))
test_import("cv2", import_statement="import cv2", test_function=test_functions.get("cv2"))
test_import("decoding", import_statement=None, test_function=test_functions.get("decoding"))
test_import("decord", import_statement=None, test_function=test_functions.get("decord"))
test_import("diffusers", import_statement=None, test_function=test_functions.get("diffusers"))
test_import("einops", import_statement=None, test_function=test_functions.get("einops"))
test_import("english", import_statement=None, test_function=test_functions.get("english"))
test_import("eval", import_statement=None, test_function=test_functions.get("eval"))
test_import("face_detector", import_statement=None, test_function=test_functions.get("face_detector"))
test_import("ffmpeg", import_statement=None, test_function=test_functions.get("ffmpeg"))
test_import("gradio", import_statement=None, test_function=test_functions.get("gradio"))
test_import("hangul_romanize", import_statement=None, test_function=test_functions.get("hangul_romanize"))
test_import("imageio", import_statement=None, test_function=test_functions.get("imageio"))
test_import("insightface", import_statement=None, test_function=test_functions.get("insightface"))
test_import("kornia", import_statement=None, test_function=test_functions.get("kornia"))
test_import("latentsync", import_statement=None, test_function=test_functions.get("latentsync"))
test_import("librosa", import_statement=None, test_function=test_functions.get("librosa"))
test_import("lpips", import_statement=None, test_function=test_functions.get("lpips"))
test_import("lws", import_statement=None, test_function=test_functions.get("lws"))
test_import("matplotlib", import_statement=None, test_function=test_functions.get("matplotlib"))
test_import("mediapipe", import_statement=None, test_function=test_functions.get("mediapipe"))
test_import("model", import_statement=None, test_function=test_functions.get("model"))
test_import("models", import_statement=None, test_function=test_functions.get("models"))
test_import("more_itertools", import_statement=None, test_function=test_functions.get("more_itertools"))
test_import("motion_module", import_statement=None, test_function=test_functions.get("motion_module"))
test_import("nets", import_statement=None, test_function=test_functions.get("nets"))
test_import("nltk", import_statement=None, test_function=test_functions.get("nltk"))
test_import("num2words", import_statement=None, test_function=test_functions.get("num2words"))
test_import("numpy", import_statement=None, test_function=test_functions.get("numpy"))
test_import("omegaconf", import_statement=None, test_function=test_functions.get("omegaconf"))
test_import("packaging", import_statement=None, test_function=test_functions.get("packaging"))
test_import("pandas", import_statement=None, test_function=test_functions.get("pandas"))
test_import("pkg_resources", import_statement=None, test_function=test_functions.get("pkg_resources"))
test_import("preprocess", import_statement=None, test_function=test_functions.get("preprocess"))
test_import("pydub", import_statement="from pydub import AudioSegment", test_function=test_functions.get("pydub"))
test_import("pypinyin", import_statement=None, test_function=test_functions.get("pypinyin"))
test_import("python_speech_features", import_statement=None, test_function=test_functions.get("python_speech_features"))
test_import("regex", import_statement=None, test_function=test_functions.get("regex"))
test_import("requests", import_statement=None, test_function=test_functions.get("requests"))
test_import("resnet", import_statement=None, test_function=test_functions.get("resnet"))
test_import("scenedetect", import_statement=None, test_function=test_functions.get("scenedetect"))
test_import("scipy", import_statement=None, test_function=test_functions.get("scipy"))
test_import("soundfile", import_statement=None, test_function=test_functions.get("soundfile"))
test_import("spacy", import_statement=None, test_function=test_functions.get("spacy"))
test_import("syncnet_eval", import_statement=None, test_function=test_functions.get("syncnet_eval"))
test_import("tokenizers", import_statement=None, test_function=test_functions.get("tokenizers"))
test_import("torch", import_statement=None, test_function=test_functions.get("torch"))
test_import("torchvision", import_statement=None, test_function=test_functions.get("torchvision"))
test_import("tqdm", import_statement=None, test_function=test_functions.get("tqdm"))
test_import("trainer", import_statement=None, test_function=test_functions.get("trainer"))
test_import("transcribe", import_statement=None, test_function=test_functions.get("transcribe"))
test_import("transformers", import_statement=None, test_function=test_functions.get("transformers"))
test_import("unet_blocks", import_statement=None, test_function=test_functions.get("unet_blocks"))
test_import("videomaev2_finetune", import_statement=None, test_function=test_functions.get("videomaev2_finetune"))

print()
print("="*80)
print("INSTALLATION HELP:")
print("="*80)
print("For missing packages, you can typically install them using:")
print("  • pip install <package_name>")
print("  • conda install <package_name>")
print("  • pip install -r requirements.txt (if you have a requirements file)")
print()
print("For GPU support (PyTorch, TensorFlow), visit their official websites")
print("for platform-specific installation instructions.")
print()

# FIXED: Summary counter
print("SUMMARY:")
print("-" * 20)

# Re-run a quick test to count failures
missing_modules = []
total_installable = len(['DeepCache', 'PIL', 'TTS', 'accelerate', 'affine_transform', 'attention', 'audio', 'basic', 'box_utils', 'cog', 'cutlet', 'cv2', 'decoding', 'decord', 'diffusers', 'einops', 'english', 'eval', 'face_detector', 'ffmpeg', 'gradio', 'hangul_romanize', 'imageio', 'insightface', 'kornia', 'latentsync', 'librosa', 'lpips', 'lws', 'matplotlib', 'mediapipe', 'model', 'models', 'more_itertools', 'motion_module', 'nets', 'nltk', 'num2words', 'numpy', 'omegaconf', 'packaging', 'pandas', 'pkg_resources', 'preprocess', 'pydub', 'pypinyin', 'python_speech_features', 'regex', 'requests', 'resnet', 'scenedetect', 'scipy', 'soundfile', 'spacy', 'syncnet_eval', 'tokenizers', 'torch', 'torchvision', 'tqdm', 'trainer', 'transcribe', 'transformers', 'unet_blocks', 'videomaev2_finetune'])

for module_name in sorted(['DeepCache', 'PIL', 'TTS', 'accelerate', 'affine_transform', 'attention', 'audio', 'basic', 'box_utils', 'cog', 'cutlet', 'cv2', 'decoding', 'decord', 'diffusers', 'einops', 'english', 'eval', 'face_detector', 'ffmpeg', 'gradio', 'hangul_romanize', 'imageio', 'insightface', 'kornia', 'latentsync', 'librosa', 'lpips', 'lws', 'matplotlib', 'mediapipe', 'model', 'models', 'more_itertools', 'motion_module', 'nets', 'nltk', 'num2words', 'numpy', 'omegaconf', 'packaging', 'pandas', 'pkg_resources', 'preprocess', 'pydub', 'pypinyin', 'python_speech_features', 'regex', 'requests', 'resnet', 'scenedetect', 'scipy', 'soundfile', 'spacy', 'syncnet_eval', 'tokenizers', 'torch', 'torchvision', 'tqdm', 'trainer', 'transcribe', 'transformers', 'unet_blocks', 'videomaev2_finetune']):
    try:
        __import__(module_name)
    except ImportError:
        missing_modules.append(module_name)

installed_count = total_installable - len(missing_modules)
print(f"Total installable packages found: {total_installable}")
print(f"Currently installed: {installed_count}")
print(f"Missing/Need installation: {len(missing_modules)}")

if missing_modules:
    print(f"Missing modules: {', '.join(missing_modules)}")

print()
print("Run this script regularly to check your environment setup!")
